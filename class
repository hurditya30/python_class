{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7951ee4e-167e-494f-b4ff-184f60144571",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "length: 5\n",
      "4th element: 9\n"
     ]
    }
   ],
   "source": [
    "num_list=2,3,5,9,11\n",
    "print(\"length:\", len(num_list))\n",
    "print(\"4th element:\",num_list[3])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7a58ce3c-86de-40d4-8c41-91f7d11c9d3c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 5, 7, 11]\n",
      "4th element: 7\n"
     ]
    }
   ],
   "source": [
    "num_list=[2,3,5,9,11]\n",
    "num_list[3]=7\n",
    "print(num_list)\n",
    "print(\"4th element:\",num_list[3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8b6e25f8-643a-48f6-9d16-19d6aadb12b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Modified list: [2, 23, 35, 6, -5]\n",
      "List length: 5\n"
     ]
    }
   ],
   "source": [
    "my_list = [2, 23, 39, 6, -5]\n",
    "my_list[2] = 35\n",
    "print(\"Modified list:\", my_list)\n",
    "print(\"List length:\", len(my_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e78d5822-a2a4-47d2-81f7-31a5b6797789",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tuple_1:(2, 3, 4)\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "tuple_1=(2,3,4)\n",
    "print(f'tuple_1:{tuple_1}')\n",
    "print(tuple_1[1])\n",
    "data_13=('Aimee Perry',96,[94,100,97,93])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e84c851f-3079-4a50-94e8-5c196a57ff0f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tuple_1:(2, 3, 4)\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "tuple_1=(2,3,4)\n",
    "print(f'tuple_1:{tuple_1}')\n",
    "print(tuple_1[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "68149e6a-70ca-4933-9006-a618567f2869",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data_13:('Aimee Perry', 96, [94, 100, 97, 93])\n",
      "[94, 100, 97, 93]\n"
     ]
    }
   ],
   "source": [
    "data_13=('Aimee Perry',96,[94,100,97,93])\n",
    "print(f'data_13:{data_13}')\n",
    "print(data_13[2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "41c17e6b-0449-49c2-8eed-6e0516a61571",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'tuple' object does not support item assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[28], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m tuple_3\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m100\u001b[39m,\u001b[38;5;241m200\u001b[39m,\u001b[38;5;241m300\u001b[39m)\n\u001b[1;32m----> 2\u001b[0m tuple_3[\u001b[38;5;241m2\u001b[39m]\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(tuple_3)\n",
      "\u001b[1;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"
     ]
    }
   ],
   "source": [
    "tuple_3=(100,200,300)\n",
    "tuple_3[2]=0\n",
    "print(tuple_3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ba73a0ec-aea5-4db4-9620-ea8f8a9984e5",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'tuple' object has no attribute 'append'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[29], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m tuple_1\u001b[38;5;241m=\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124malpha\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mbravo\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcharlie\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m----> 2\u001b[0m tuple_1\u001b[38;5;241m.\u001b[39mappend(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcharlie\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'tuple' object has no attribute 'append'"
     ]
    }
   ],
   "source": [
    "tuple_1=('alpha','bravo','charlie')\n",
    "tuple_1.append('charlie')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "41493837-5456-4914-9551-c6b01c0cf71e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{10, 11, 12, 13}\n"
     ]
    }
   ],
   "source": [
    "my_set={10,11,12,13}\n",
    "print(my_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c04b8bcf-5788-408f-933c-82e80b20c1ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{19, 12, 13, 14}\n",
      "[12, 13, 14, 19, 12, 13]\n",
      "(12, 13, 14, 19, 12, 13)\n",
      "4\n",
      "6\n",
      "6\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "'set' object is not subscriptable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[36], line 10\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;28mlen\u001b[39m(my_list))\n\u001b[0;32m      9\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;28mlen\u001b[39m(my_tuple))\n\u001b[1;32m---> 10\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msecond_element\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mmy_set_dup[\u001b[38;5;241m3\u001b[39m]\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
      "\u001b[1;31mTypeError\u001b[0m: 'set' object is not subscriptable"
     ]
    }
   ],
   "source": [
    "my_set_dup={12,13,14,19,12,13}\n",
    "print(my_set_dup)\n",
    "my_list=[12,13,14,19,12,13]\n",
    "print(my_list)\n",
    "my_tuple=(12,13,14,19,12,13)\n",
    "print(my_tuple)\n",
    "print(len(my_set_dup))\n",
    "print(len(my_list))\n",
    "print(len(my_tuple))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "fe697102-7741-4f1d-858d-76713474f65b",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'set' object has no attribute 'append'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[37], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m my_set_dup\u001b[38;5;241m=\u001b[39m{\u001b[38;5;241m12\u001b[39m,\u001b[38;5;241m13\u001b[39m,\u001b[38;5;241m14\u001b[39m,\u001b[38;5;241m19\u001b[39m,\u001b[38;5;241m12\u001b[39m,\u001b[38;5;241m13\u001b[39m}\n\u001b[1;32m----> 2\u001b[0m my_set_dup\u001b[38;5;241m.\u001b[39mappend(\u001b[38;5;241m100\u001b[39m)\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(my_set_dup)\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'set' object has no attribute 'append'"
     ]
    }
   ],
   "source": [
    "my_set_dup={12,13,14,19,12,13}\n",
    "my_set_dup.append(100)\n",
    "print(my_set_dup)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
